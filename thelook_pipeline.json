{
  "components": {
    "comp-compute-metrics": {
      "executorLabel": "exec-compute-metrics",
      "inputDefinitions": {
        "artifacts": {
          "model": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "test_metric": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          },
          "train_metric": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          },
          "val_metric": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-create-dataset-from-bq": {
      "executorLabel": "exec-create-dataset-from-bq",
      "outputDefinitions": {
        "artifacts": {
          "output_dir": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-make-data-splits": {
      "executorLabel": "exec-make-data-splits",
      "inputDefinitions": {
        "artifacts": {
          "dataset_full": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "dataset_test": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          },
          "dataset_train": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          },
          "dataset_val": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-train-model": {
      "executorLabel": "exec-train-model",
      "inputDefinitions": {
        "artifacts": {
          "dataset_test": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          },
          "dataset_train": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          },
          "dataset_val": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "model": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    }
  },
  "defaultPipelineRoot": "gs://gcp-pipeline/pipeline_root/",
  "deploymentSpec": {
    "executors": {
      "exec-compute-metrics": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "compute_metrics"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef compute_metrics(\n    model: Input[Model],\n    train_metric: Output[Metrics],\n    val_metric: Output[Metrics],\n    test_metric: Output[Metrics]\n):\n    import json\n\n    with open(model.path, 'r') as file:\n        model_metrics = json.load(file)\n\n    train_metric.log_metric('train_auc', model_metrics['train'])\n    val_metric.log_metric('val_auc', model_metrics['eval'])\n    test_metric.log_metric('test_auc', model_metrics['test'])\n\n"
          ],
          "image": "python:3.9"
        }
      },
      "exec-create-dataset-from-bq": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "create_dataset_from_bq"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef create_dataset_from_bq(\n    output_dir: Output[Dataset],\n):\n    import pandas as pd\n    from src.preprocess import create_dataset_from_bq as preprocess_create_dataset_from_bq\n\n    try:\n        df = preprocess_create_dataset_from_bq()\n        df.to_csv(output_dir.path, index=False)\n    except Exception as e:\n        print(f\"Error in create_dataset_from_bq: {e}\")\n        raise\n\n"
          ],
          "image": "eu.gcr.io/gcp-learn-430710/thelook_training_demo:latest"
        }
      },
      "exec-make-data-splits": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "make_data_splits"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef make_data_splits(\n    dataset_full: Input[Dataset],\n    dataset_train: Output[Dataset],\n    dataset_val: Output[Dataset],\n    dataset_test: Output[Dataset]\n):\n    import pandas as pd\n    from src.preprocess import make_data_splits\n\n    df_agg = pd.read_csv(dataset_full.path)\n    df_agg.fillna('NA', inplace=True)\n\n    df_train, df_val, df_test = make_data_splits(df_agg)\n    print(f\"{len(df_train)} samples in train\")\n    print(f\"{len(df_val)} samples in val\")\n    print(f\"{len(df_test)} samples in test\")\n\n    df_train.to_csv(dataset_train.path, index=False)\n    df_val.to_csv(dataset_val.path, index=False)\n    df_test.to_csv(dataset_test.path, index=False)\n\n"
          ],
          "image": "eu.gcr.io/gcp-learn-430710/thelook_training_demo:latest"
        }
      },
      "exec-train-model": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "train_model"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef train_model(\n    dataset_train: Input[Dataset],\n    dataset_val: Input[Dataset],\n    dataset_test: Input[Dataset],\n    model: Output[Model]\n):\n    import json\n    from src.train import train_and_evaluate\n\n    outputs = train_and_evaluate(\n        dataset_train.path,\n        dataset_val.path,\n        dataset_test.path\n    )\n    cb_model = outputs['model']\n    scores = outputs['scores']\n\n    model.metadata[\"framework\"] = \"catboost\"\n    # Save the model as an artifact\n    with open(model.path, 'w') as f:\n        json.dump(scores, f)\n\n"
          ],
          "image": "eu.gcr.io/gcp-learn-430710/thelook_training_demo:latest"
        }
      }
    }
  },
  "pipelineInfo": {
    "name": "pipeline-demo"
  },
  "root": {
    "dag": {
      "outputs": {
        "artifacts": {
          "compute-metrics-test_metric": {
            "artifactSelectors": [
              {
                "outputArtifactKey": "test_metric",
                "producerSubtask": "compute-metrics"
              }
            ]
          },
          "compute-metrics-train_metric": {
            "artifactSelectors": [
              {
                "outputArtifactKey": "train_metric",
                "producerSubtask": "compute-metrics"
              }
            ]
          },
          "compute-metrics-val_metric": {
            "artifactSelectors": [
              {
                "outputArtifactKey": "val_metric",
                "producerSubtask": "compute-metrics"
              }
            ]
          }
        }
      },
      "tasks": {
        "compute-metrics": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-compute-metrics"
          },
          "dependentTasks": [
            "train-model"
          ],
          "inputs": {
            "artifacts": {
              "model": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "model",
                  "producerTask": "train-model"
                }
              }
            }
          },
          "taskInfo": {
            "name": "compute-metrics"
          }
        },
        "create-dataset-from-bq": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-create-dataset-from-bq"
          },
          "taskInfo": {
            "name": "create-dataset-from-bq"
          }
        },
        "make-data-splits": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-make-data-splits"
          },
          "dependentTasks": [
            "create-dataset-from-bq"
          ],
          "inputs": {
            "artifacts": {
              "dataset_full": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "output_dir",
                  "producerTask": "create-dataset-from-bq"
                }
              }
            }
          },
          "taskInfo": {
            "name": "make-data-splits"
          }
        },
        "train-model": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-train-model"
          },
          "dependentTasks": [
            "make-data-splits"
          ],
          "inputs": {
            "artifacts": {
              "dataset_test": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "dataset_test",
                  "producerTask": "make-data-splits"
                }
              },
              "dataset_train": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "dataset_train",
                  "producerTask": "make-data-splits"
                }
              },
              "dataset_val": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "dataset_val",
                  "producerTask": "make-data-splits"
                }
              }
            }
          },
          "taskInfo": {
            "name": "train-model"
          }
        }
      }
    },
    "outputDefinitions": {
      "artifacts": {
        "compute-metrics-test_metric": {
          "artifactType": {
            "schemaTitle": "system.Metrics",
            "schemaVersion": "0.0.1"
          }
        },
        "compute-metrics-train_metric": {
          "artifactType": {
            "schemaTitle": "system.Metrics",
            "schemaVersion": "0.0.1"
          }
        },
        "compute-metrics-val_metric": {
          "artifactType": {
            "schemaTitle": "system.Metrics",
            "schemaVersion": "0.0.1"
          }
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.7.0"
}